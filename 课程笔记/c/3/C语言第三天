分屏:
底行模式下输入  vsp 文件名


强制数据类型转换
double < --- float  < ---- long < ---- int < --- short < --- char


隐式
1.赋值
如果赋值符号左右两边数据类型不相同,进行赋值时可能出现:
(1).浮点型赋给整形会造成精度丢失
(2).大的数据类型赋给小的数据类型,可能造成数据越界

2.算术
如果运算时算式中的数据类型不一致,默认向最大的数据类型发生转变

3.有无符号
当有符号数与无符号数运算时,会默认无符号进行运算

4.printf问题

显示:(多用于指针间的转换)
格式:
(需要转换成的数据类型)需要被转换类型的目标
注意:
(1).大的数据类型向小的数据类型转换时需要注意数据越界
(2).浮点型向整形进行强制转换时注意精度丢失问题
(3).强制数据类型转换不会对数据本身进行改变,只会使展示的现象发生改变

运算符:

算术运算符
(双目运算符)
+
-
*
/ 取整  在运算中有取整的功能
% 求余  只能在整型运算中使用,有取出余数的功能
(单目运算符)
自加
++:
a++:    两者本质都是:a = a+1;
++a:
例如:
int b;
b = a++; ===>> b = a, a = a+1; 先赋值后运算


b = ++a; ===>> a = a+1, b = a;  先运算后赋值

在printf中打印时也会出现以上情况
注:错误
1.在C语言中不能再同一时间段内对同一片空间进行反复的修改
自减
--:
a--:
--a:


关系运算符(双目)  (多用于循环和判断语句)
>
<
>=
<=
==   等于  区别赋值'='
!=
关系运算符有结果,结果成立为1,不成立为0


逻辑运算符  (一般和关系运算符结合使用)
(双目运算符)
&&   逻辑与
一般形式:
表达式1 && 表达式2
  1          1       1
  0          1       0
  1          0       0
  0          0       0
结论:
(1).与1与不变,与0与为0
(2).表达式1成立时则需要判断表达式2是否成立得到结果,
如果表达式1不成立,直接可以得到最终结果为0,不需要判断表达式2(逢0截止)

||   逻辑或
表达式1 || 表达式2
  1          1       1
  0          1       1
  1          0       1
  0          0       0
结论:
(1).与1或为1,与0或不变
(2).表达式1成立时,不需要判断表达式2,最终结果一定成立
表达式1不成立时,才需要判断表达式2是否成立来的到结果(逢1截止)

!    逻辑反    !1 == 0   !0 == 1

位运算符 (注:数对数据的补码进行操作,按bit操作)
~:  按位取反
&:  按位与         与0与为0,与1与不变      无论是正数函数负数,符号位还是数据位,在进行位运算时
|:  按位或         与1或为1,与0或不变      该怎么变就怎么变
^:  异或           相同为0,相异为1
如何交换两个变量:
int a = 10 ,b = 4;
1.中间变量
int c
c = a;
a = b;
b = c;
2.算术交换(注意a+b的值不能超过a的数据类型大小)
a = a+b;
b = a-b;
a = a-b;
3.异或交换(a和b的值不能相同)
a = a^b;
b = a^b;
a = a^b;
一般形式:
需要位移的变量  '>>'或者'<<'  移位的位数
<< : 左移时不需要考虑符号位,符号位移到什么就是什么(逻辑左移)
>> : 右移时需要考虑符号位,补码右移n位如果为负数,高位补n个1,如果为正数,高位补n个0

思考题:如何实现将某一位清0和置1
把第n为置1:
  | 1 << n-1

把第n位清0:
  & ~(1 << n-1)

特殊运算符
,(逗号运算符):
一般形式:
x = (表达式1,表达式2,表达式3)
最后的x的值为最后一个逗号后表达式的运算结果(注:前面的表达式也可能对最后一个表达式造成影响)

?(条件运算符):三目运算符
一般形式:
表达式1 ? 表达式2 : 表达式3
判断表达式1的结果是否成立,表达式1成立,输出的结果为表达式2的结果,反之,输出表达式3的结果

例:写一个宏实现两个数比较,输出较小的那个数


sizeof():计算数据类型大小
sizeof(数据类型或者对应的变量名)


输入输出函数
putchar
字符输出函数
int putchar(int c);
功能:向屏幕输出单个字符
参数:字符  ascii码
返回值:当putchar正确执行时,返回的结果就是输出字符的ascii码


getchar
字符输入函数
int getchar(void);
功能:从键盘获取一个字符
参数:不需要
返回值:正确获取时,返回获取到字符的ascii码

printf

scanf
