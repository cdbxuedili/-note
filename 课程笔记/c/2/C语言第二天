gcc编译器:
C语言源文件 ---> 二进制可执行文件
预处理:会把C语言源文件进行头文件的展开以及宏替换,不会对代码的正确性进行校验
gcc -E hello.c -o hello.i

编译:将预处理过的头文件进行编译,检查代码的正确性,如果代码有误报错,
如果没有问题,生成汇编语言文件
gcc -S hello.i -o hello.s

汇编:将编译得到的汇编语言文件进行汇编,生成二进制文件
gcc -c hello.s -o hello.o

链接:将二进制文件链接生成可执行文件(赋予执行权限)
gcc hello.o -o hello

注:gcc --help  可以查询选项

冯诺依曼模型
输入设备  输出设备  存储器 运算器  控制器


运行内存  RAM
运行速率较快  上电工作  断电易失数据

外部存储  ROM
容量大  效率较低 能够长时间保存数据

寄存器

二进制   0~1   逢2进1
十进制   0~9   逢10进1
八进制   0~7   逢8进1   1位八进制可以用3位二进制表示
十六进制 0~9 abcdef  逢16进1  1位十六进制可以用4位二进制表示

ASCII表
space  32
A   65
a   97

注释:
//:在行头使用表示该行失效
/*        */: 多行注释

#if 0(表示注释)  1(取消注释)

#endif
多行注释


数据类型

逻辑类型
bool  逻辑真1  假0   注:在C语言中非0为真,0为假
需要头文件 #include <stdbool.h>

在计算机中一切数据以补码的形式存在
整形    1字节 == 8bit
char(字符型)   1字节

unsigned  代表无符号  这个时候 char的取值范围为0~255(8位均为数据位)
signed    代表有符号  这个时候 char的最高位为符号位(1位负,0为正) 取值范围(-128~127)
          注:系统默认有符号
正数:反码和补码与原码相同
10
原码  0000 1010
反码  0000 1010
补码  0000 1010
负数:反码为原码除符号位不变其余取反,补码在反码的基础上+1
-10
原码  1 000 1010
反码  1 111 0101
补码  1 111 0110

数据越界:系统不会报错,需要注意
有符号char型   129时出现越界
129
原码 1 000 0001
反码 1 000 0001
补码 1 000 0001
当以该补码形式存入计算机时,系统直到这个一个有符号数,默认把补码中的最高位变成符号位
于是该补码就变成一个负数的补码,输出得到的变化
反码 1 000 0000
原码 1 111 1111   -127
最终输出得到-127  数据越界
-128:临界值(数据位和符号位重合)  所谓的-0 补码(1 000 0000)  注意为临界值时原码和反码不好讨论
例如:-127和-1补码相加

short(短整型)   2个字节
int     4个字节   16位操作系统 2个字节
long(长整型)    32位操作系统 4个字节   64位操作系统中时8个字节

浮点型(编译器默认保留6位)
float(单精度)   4个字节   精度为6位   有效数位7(指小数点前1位+小数点后6位)
double(双精度)  8个字节   精度为16位

构造类型

指针类型

void型

常量:在程序运行过程中不会发生改变的量
整数常量 十进制  十六进制(0x)  八进制(0)  二进制(0b)

浮点型常量
123.123
1.2312x10^2  数学上的科学计数法
指数形式 : 1.2312e+2

字符常量  必须用''引出
字符串常量  必须用""引出,并且末尾总有'\0'字符作为结尾

标识常量(宏替换):define
头文件下方定义define
格式:
#define 标识符名称  被替换的目标
define可以替换常量,简单的运算公式,C语句
本质:是字符串的整体代换!

变量:程序运行时可以发生改变的量
存储类型 数据类型 变量名

全局变量:不在{}内的变量
局部变量:在{}内的变量

存储类型:
auto:修饰局部变量,如果局部变量书写时没有写上数据类型默认为auto类型
register(寄存器类型):把修饰的变量存放到寄存器中,提高程序运行效率,当寄存器满时
                    变量默认变成auto类型
extern(外部引用类型):引用同一工程中的全局变量
                    定义:在内存上分配空间
                    声明:告诉编译器该变量存在有空间,但并不是在声明出开辟空间

初始化:
int a = 0; 在变量定义时对变量进行赋值叫做初始化
a = 10; 单纯的赋值操作

static
1.修饰全局变量  限制作用域,该全局变量生效的空间仅在本文件中
2.修饰函数      同上
3.修饰局部变量  改变局部变量的存放位置,延长局部变量的生命周期,运算的结果保留上一次的结果
