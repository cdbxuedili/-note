函数:模块化思想,将一部分代码进行独立,但依然和main函数有关联


函数声明
函数返回值类型 函数名(形式参数);


函数调用
函数名(实际参数);

注:实际参数功能就是将值传递给对应子函数中的形式参数

函数定义
函数返回值类型 函数名(形式参数)
{
    C语言语句;
    return 返回值;    结束函数并返回函数的返回值
}

注:形式参数也是在函数执行时临时创建的局部变量,作用域在函数空间

注:函数传参的本质,其实就是赋值的过程,实际参数往形式参数赋

值传递(复制传参):只是将数值进行传递,由实际参数将数值传递给形式参数(copy),
传递完成后,形式参数和实际参数没有本质关联

址传递(地址传参):将地址值进行传递,形式参数选用指针变量进行接收,这个时候,
子函数就拥有了main函数中的地址,也就可以对main函数中的值进行对应操作

数组传递:
值传递
址传递
注:数组的两种传递方式无论是值传递还是址传递,都是传递数组名
,然而数组名通常情况下表示数组首地址,所以本质都是地址传递
注:
1.详见fun_array.c   其中fun1时地址形式传递   fun是复制形式传递
2.通常情况下数组传递时都是传递数组的数组名,以及数组的元素个数

二维数组传参详见fun_erwei.c    fun是复制形式   fun1是地址形式

指针数组传参详见fun_zhizhenshuzu.c    fun是复制形式   fun1是地址形式

void函数
void  函数名(void);


函数指针:
本质是指针,该指针指向一个函数(本质就是指针变量,存放函数的入口地址)
功能:可以利用函数指针调用函数

函数名本身就是函数的入口地址
例如:
int fun(int a,int b);  ---->   int  (int,int)

函数入口地址:fun == &fun
int (int,int)*p = fun;  ----->  int (*p)(int,int) = fun;

指针函数:xxxxxxxxx
本质:返回值类型为指针类型的函数
返回指针类型时,注意不能返回函数空间内的一个地址

函数指针数组:
本质是数组,数组内存放函数的入口地址
详见:fun_point_array.c

main 命令行传参
int argc :统计命令行传参的个数
注:统计时会把执行命令(例如./a.out)一同统计
const char * argv[]:存放命令行传参的内容
注:存放的内容都是字符串并且argv[0] 一般都为./xxx

作业:
atoi:ascii to int
