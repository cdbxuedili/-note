软件包管理命令:
Debin Linux 首先提出软件包机制  deb软件包
deb软件包将二进制文件,配置文件,man/info等帮助手册合并在一起
redhat RPM软件包

ubuntu支持deb软件包
1.二进制包(.deb)
2.源码包(.deb-src)

软件包的命名规则:
sublime-text_build-3083_i386.deb
命名格式:软件包名_软件版本-修订版本号_体系架构(i386).deb
软件包:软件包名_软件版本-修订版本号_体系架构(i386).deb
软件包名:软件包名

软件管理工具:
1.命令行
2.文本窗口
3.图形化界面


dpkg
1.离线安装,需要事先准备软件包
2.不会检查软件包的依赖关系
sudo:默认借助root用户权限执行命令

sudo dpkg -i 软件包       安装本地的deb软件包

sudo dpkg -r 软件名       移除一个已经安装的软件(会留下配置文件)

sudo dpkg -P 软件名       移除一个已经安装的软件(完全删除,包括配置文件)

sudo dpkg -L 软件名       列出安装软件包的清单

apt
1.在线安装,保证网络通畅,无需实现下载软件包
ubuntu集中式的软件仓储机制
2.会自动检查软件依赖关系,如果依赖文件不存在,自动下载并安装

软件源配置文件/etc/apt/sources.list

软件索引文件/var/lib/apt/lists
在线安装四部
1.扫描软件包更新列表,找到最新的软件版本号
2.检查软件的依赖关系
3.从软件源所指定的镜像站点中,下载相关软件包
4.解压软件包,完成安装和配置

sudo apt-get install 软件名     安装软件
sudo apt-get update  扫描软件源,更新索引文件/var/lib/apt/lists
sudo apt-get upgrade  更新所有软件

sudo apt-get remove 软件名    卸载软件(不完全卸载)
sudo apt-get --purge remove 软件名   完全卸载(包括配置文件)

重新安装
sudo apt-get install 软件名  --reinstall

检查依赖关系
sudo apt-get check  检查依赖关系
sudo apt-get -f install 修复依赖关系

软件包缓冲区:
/var/cache/apt/archives
sudo apt-get clean  删除缓冲区中的软件包
sudo apt-get autoclean 保留最新版本的软件包
下载源码包:
sudo apt-get source 软件名    下载对应软件的原码包,下载到当前命令执行路径下,而不是缓冲区

sudo apt-cache depends 软件名   查看该软件依赖关系

修改软件源:
1.打开ubuntu   执行sudo software-center
2.选择左上角的edit,   点击software sources
3.选download 下拉菜单中的other
4.选到china服务器   点击choose service
5.退出所有窗口
6.执行sudo apt-get update

alias:给已知或已存在的命令起别名
格式:
      alias 别名='已知或已存在的命令'
      unalias 别名
      注:
      1.该方式只针对当前终端有效
      2.修改配置文件可以永久生效
      家目录下的.bashrc
      source 配置文件名    重新启动配置文件

history:查询历史命令记录
history 20:显示最近20条记录
history -c:清除当前记录
HISTSIZE=1000     决定能够保存多少条记录
HISTFILESIZE=2000 决定最终在文件中保留多少条记录.bash_history

uname -r 查看当前内核版本号

3.5.0-23-generic
主版本号.次版本号.释出版本号-修订版本号

主版本号和次版本号为偶数,稳定版本
主版本号和次版本号为奇数,开发版本
www.kernel.org

shell:命令解析器
shell命令格式:
命令名称  选项  参数
命令名称:严格区分大小写
选项:'-'或者'--'引导  能够改变命令执行效果
参数:命令执行的对象
注:
1.三要素之间有空格分开
2.选项和参数大多情况下可以互换位置

man手册
help
info

linux7种文件类型:
b(块设备文件) c(字符设备文件) d(目录文件) -(普通文件) l(链接文件) s(套接字文件) p(管道文件)

chmod:修改文件权限
chmod u/g/o+r/w/x 文件名
chmod 777 文件名   将文件权限置到最高

touch

shell中的特殊字符
通配符:批量处理文件
*:代替任意长度的任意字符
?:代替一个长度的任意字符
[]:以下三种书写格式都只能匹配一个字符
ls -l [123].c  显示1.c 2.c 3.c 的内容
ls -l [1-3].c  同上
ls -l [^123].c 除了1.c 2.c 3.c 显示其他X.c文件

管道符:  |
格式:命令1 | 命令2 | 命令3
功能:连接多条命令,完成特殊操作
(把命令1的输出结果通过管道符传递给后面的命令2输入使用)
注:
1.命令1要有输出结果的能力
2.命令2要有输入结果的能力
wc(word count):统计输入内容的行数,单词数,字符数
wc 文件名:统计该文件的行数,单词数,字符数
wc -l 文件名:统计行数
wc -c 文件名:统计字符数
wc -w 文件名:统计单词数
wc :统计终端输入的内容   ctrl+d 结束终端输入的

ls /bin | wc -w

cat 文件名:显示文件内容到屏幕上
-n : 显示对应行数

head -10 文件名:显示文件前10行内容
tail -10 文件名:显示文件末尾10行内容

sort 文件名:文件归纳排序之后显示

输入输出重定向符:
格式:命令 重定向符 文件名

输出重定向: >    >>
      ls > info.txt(新建模式):如果该文件不存在,则创建该文件,然后执行命令
                             如果文件存在,则先清空文件中内容,在执行命令
      ls >> info.txt(追加模式):如果该文件不存在,则创建该文件,然后执行命令
                              如果文件存在,则在文件末尾添加执行结果
输入重定向: <
      wc filename
      wc < filename

错误输出重定向: 2> &> 或 2>> &>>
      只针对命令执行错误的情况
      2> &>(新建模式):如果该文件不存在,则创建该文件,然后执行命令
                    如果文件存在,则先清空文件中内容,在执行命令
                    注:2> 只会将错误的命令执行结果输出重定向到文件
                       &> 将错误和正确执行的命令结果输出重定向到文件
     2>> &>>(追加模式):如果该文件不存在,则创建该文件,然后执行命令
                      如果文件存在,则在文件末尾添加执行结果
                      注:2>> 只会将错误的命令执行结果输出重定向到文件
                         &>> 将错误和正确执行的命令结果输出重定向到文件

命令置换符: ``
功能:将命令1的执行结果交给命令2使用
格式:命令2 `命令1`
例如: ls `pwd`

grep:查找字符串

grep "字符串内容" 文件名:
-n:显示行号
-R:递归子目录进行查找
grep "string" * -n -R
"字符串格式":
"string" : 显示所有包含"string"的行
"^string": 显示所有以该字符串开始的行
"string$": 显示所有以该字符串为结尾的行
"^string$":显示只有该字符串的行

vim编辑器查找字符串:
在命令模式下直接输入/string 回车   所有string都会高亮  N:找上一个 n:找下一个
取消高亮:底行模式下输入:nohl

find -name 文件名 : 查找文件所在位置
