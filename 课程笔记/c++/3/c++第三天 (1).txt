类的使用

class 类型名称
{
public:属性和方法既可以被类的内部使用，也可以被类的外部使用
protected:属性和方法只能被类的内部使用，不可以被类的外部使用，只用于类的继承
private:属性和方法只能被类的内部使用，不可以被类的外部使用
	成员属性
		非静态的
		静态的
	成员方法
		非静态的
		静态的
		虚函数
};

c中的struct不能有函数定义

封装:将属性和方法集合到一个整体中。
	 类的内部的成员或者方法，可以根据需求决定是否给类的外部使用。

如何对成员初始化？
构造函数:除了初始化，用于申请空间
	1、名字和类的名称一致
	2、没有返回值类型，可以有参数，可以没有参数
	
析构函数:主要用于释放空间
	1、名字和类的名称一致，在名字前加~
	2、没有返回值类型，没有参数
	
构造函数的分类:无参构造、有参构造、拷贝构造
无参构造:
class test 
{
public:
	test()
	{
		
	}
	
	test(int a)
	{
		
	}
	
	test(int a,int b)
	{
	
	}
	
	test(const test& obj)
	{
	
	}
};

test t;//就会调用无参构造函数	

有参构造:
test t(100);//定义一个对象并且调用一个参数的有参构造器
test t = 100;//定义一个对象并且调用一个参数的有参构造器
test t = (1,2,3,4,5,100);//定义一个对象并且调用一个参数的有参构造器
	 
test t(1,2);//调用两个参数的有参构造函数



拷贝构造函数:
test t1(10);
test t2(20);
t1 = t2;//赋值，调用=的运算符重载

test t3 = t1;
//初始化，调用拷贝构造函数(如果没有自己实现拷贝构造函数，编译器会调用默认的拷贝构造函数，只不过这个默认的功能实现的是浅拷贝)

1、用一个对象去初始化另一个对象
2、一个对象作为函数参数时
3、当函数返回一个对象时(很多编译器已经优化了)

主要涉及到的是指针的操作
浅拷贝:只是将指针的内容做了备份。
深拷贝:不仅对指针的内容做了备份，还对指针指向的内容做了备份。
和析构函数有关――调一次析构函数就会释放一次空间，如果是浅拷贝并且多次释放空间了，容易出现内存泄漏。

静态成员变量和静态成员函数

静态成员变量:
class test
{
private:
	int a;
	int b;
	static int c;
	
public:
	test(int a,int b,int c)//定义对象编译会出错，静态成员变量不能用构造函数来初始化
	{
		
	}
	
	static void fun()
	{
		cout << a << endl;//会出错，静态成员函数不能操作普通成员属性。
	}
};

int test::c = 100;//静态成员变量的初始化方法

main()
{
	test t(1,2);
	
	cout << t.c << endl;
	cout << test::c << endl;//建议使用这种
	
	t.fun();
	test::fun();
}

构造函数可以私有么？不可以
析构函数可以私有么？可以
	私有后只能在堆区中创建对象，不能在栈区中创建对象。


class test
{
private:
	int a;
	int b;
	static int c;
	
public:
	test(int a,int b)
	{
		this->a = a;
		this->b = b;
	}
	
	static void fun()
	{
		
	}
	
	void print()
	{
		
	}
	
	~test()
	{
		
	}
};	
main()
{
	test t(1,2);
	t.print();
	t.fun();
}
	||
	||
	\/
class test 
{
private:
	int a;
	int b;
	static int c;
};

test(test *const this,int a,int b)
{
	
}

void fun() //不能使用this指针
{
		
}

void print(test *const this)
{
	
}
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
一、const如果放在成员函数的后面，修饰的是this指针指向的空间。

二、友元函数(全局函数)
友元函数就是全局函数，全局函数不一定是友元函数。

三、运算符重载――函数的封装
给之前已经存在的运算符新的含义。
c语言中: a * b;
		 *p = 10;
		在c编译器的内部实现了重载
		
c++中: 
	   int a = 10;
	   a << 2;
	   
	   int a = 10;
	   cout << a;
	   
如何对运算符进行重载？
单目运算符   操作数 操作符  
			 操作符 操作数
			 a ++
			 ++a
			 !a
双目运算符   左操作数 运算符 右操作数
三目运算符   操作数1?操作数2:操作数3     ?:在c++中不允许重载

剩下的只需要关心单目和双目运算符如何重载？语法规则，需要记住
双目运算符: opd1 opt opd2
	友元函数:
			返回值类型 operator运算符(opd1,opd2)
			{
				函数体
			}
	成员函数 
			返回值类型 opd1.operator运算符(opd2)
			{
				函数体
			}
			注意:
			opd2.operator运算符(opd1)  //错误的
			{
			
			}
单目运算符:opd opt 或者 opt opd 
	友元函数:
			返回值类型 operator运算符(opd)
			{
				函数体
			}
	成员函数:
			opd.operator运算符()
			{
				函数体
			}

c++重载运算符时,有些运算符只能使用成员函数法，有些只能使用全局函数法，有些两种都可以。
哪些运算符只能用成员函数实现？c++规定: =  []  ()  ->	
哪些只能使用全局函数法？ >>输出  <<输入
哪些都可以使用？+ - 前缀++ 前缀-- 后缀++ 后缀--  关系运算符  逻辑运算符等等。 
				如果两种方法都可以使用，建议使用成员函数。

obj;
++obj
obj++
后缀++是在前缀++的基础上多了占位参。

逻辑运算符可以重载么？可以重载，但是不建议重载，因为重载破坏了逻辑运算符的短路规则。	

一个函数的返回值如果是一个引用，既可以做赋值语句左值也可以做赋值语句的右值。


例子:
class MyString
{
private:
	int len;
	char *p;
	
public:
	MyString(const char *s)
	{
		if(s == NULL)
		{
			this->len = 0;
			this->p = new char [this->len + 1];
			strcpy(this->p,"");
		}
		else 
		{
			this->len = strlen(s);
			this->p = new char[this->len + 1];
			strcpy(this->p,s);
		}
	}
	~MyString()
	{
		delete[] p;
	}
};

a.operator=(b);

main()
{
	MyString s1("hello");
	
	//友元函数法:operator<<(cout,s1);
	//成员函数法:cout.operator<<(s1);
如果使用成员函数，则operator<<(s1)应该放在cout所对应的类中(ostream类)，你找不到ostream类，所以成员函数不能用。
	cout << s1 ;//重载 << 运算符
	
	
	MyString s2 = s1;//自己封装拷贝构造函数
	cout << s2 ;
	
	MyString s3(NULL);
	s3 = s1;//自己封装=的重载函数
	cout << s3 ;
	
	MyString s4("world");
	if(s4 == s1)
	{
		cout << "s4 == s1" << endl;
	}
	else 
		cout << "s4 != s1" << endl;
		
	//if("farsight" == s4) 不能重载
	if(s4 == "farsight") 可以重载
	{
		
	}	
	else 
	{
		
	}
}
