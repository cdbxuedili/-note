



立即数： A ROR (M * 2)  {A:8BIT   M:4bit}

	MOV R6,#0X1E800
	MOV R4,#0X00001200
	mov r0,#0xf000000f

	1. 如果一个数 循环去掉最大一组连续零，剩余位数如果小于8为，则是立即数
	2. 如果一个数 循环去掉最大一组连续零，剩余位数如果大于8为，则是不是立即数
	3. 如果一个数 循环去掉最大一组连续零，剩余位数如果等于8为
		3.1 末位1 在奇数位上，则不是立即数
		3.2 末位1 在偶数位上，则是立即数

	4.如果一个数取反后是立即数，则称为有效数，有效数只能用于 mov mvn

	
	ldr Rn,=0xXXXX  寄存器赋值指令，如果数据是立即数 则替换为mov Rn,#0xXXXX
					如果数据是立即数 则在内存临近位置保存这个数，并通过ldr 单寄存器 赋值指令加载
					
					LDR Rn,[0x40008100]
					0x40008100 : 0xXXXX

	ldr r0,a   @ R0 = *a	单寄存器加载指令

	ldr r9,=a  @ r9 = a	寄存器赋值伪指令 将a这个标号只给 R9

	ldr r1,=0x12345678
	ldr r2,=0x120000
	ldr r5,=1234





swp
swi


八种寻址方式：

立即数寻址：有一个数据是通过立即数形式获得
	mov r0,#250
	add r0,r1,#123
	
寄存器寻址：所以数据读写都在寄存器内直接执行
	mov r0,r1
	add r0,r1,r2

寄存器移位寻址：有一个数据是通过移位运算获得
	mov r0,r1,lsl #4
	add r0,r1,r2,lsl #5

寄存器间接寻址：把一个寄存器的只当做总线地址，来读写外部数据值
	ldr r0,[r1]     r0 = *r1
	str r0,[r1]		*r1 = r0
	
	ldr		str
	ldrh	strh
	ldrb	strb 
	ldrsh  带符号位扩展装载两个字节
	ldrsb

基址变址寻址：把一个寄存器的只当做内存块基地址，来进行偏移寻址 *（p + n）
					假设 int i,*p;
	前索引：ldr r0,[r1,#4]    r0 = *(r1 + 4)  		 i = *(p + 1)
	后索引：ldr r0,[r1],#4	  r0 = *r1;r1 = r1 + 4	 i = *(p ++)
  自动索引：ldr r0,[r1,#4]!	  r0 = *(r1 += 4)		 i = *(++ p) 

多寄存器寻址：一次存放或读取多个寄存器的值
	ldm	stm
	ldm r0,{r1-r5,r7}     r0 = &data[]
						  r1 = data[0] r2 = data[1] r3 .. r7 = data[5]
						  r1 = *(r0 + 0)   r2 = *(r0 + 4) 
	stm r0,{r1-r5}       data[0] = r1;data[1] = r2 .....
	
	
	ldmxx r0!,{r1-r5,r7}   !:地址将自动更新
	
	i:增		a:后
	d:减		b:先     默认后缀ia 
	
	ia：后增
	db：先减
	
	注意：
	拷贝数据的顺序与增减无关，永远是 低地址对应低编号寄存器
	寄存器列表 只能是从小到大
	
堆栈寻址：专门用于 栈的多寄存器寻址	
	
	f：满		d：减	
	e: 空		a: 增   默认后缀 fd 默认使用满减栈
	
	
	push：stmfd sp!,{r0-r12}
	pop : ldmfd sp!,{r0-r12}

	
相对寻址：相对于当前pc的跳转
	b
	bl
	
	在thumb 中： 跳转范围 +154 ~ -256
	
	b fun   pc = pc + n * 2  n{8bit}
	
	ldr pc,=fun 
	
	bx Rn
	blx Rn 

	ldr r0,=fun   可以跳转任意范围
	blx r0
	
	取址单元 默认pc[bit0] = 0;
	如果 PC[0] = 1;则跳转后切换到thumb指令
	如果 PC[0] = 0;则跳转后切换到arm指令

	
adr伪指令：	
	ldr Rn,=0xXXXX  寄存器赋值指令，如果数据是立即数 则替换为mov Rn,#0xXXXX
					如果数据是立即数 则在内存临近位置保存这个数，并通过ldr 单寄存器 赋值指令加载
					
					LDR Rn,[0x40008100]
					0x40008100 : 0xXXXX

	ldr r0,a   @ R0 = *a	单寄存器加载指令

	ldr r9,=a  @ r9 = a	寄存器赋值伪指令 将a这个标号只给 R9

	ldr r1,=0x12345678
	ldr r2,=0x120000
	ldr r5,=1234


									 sub r0,pc,#n
		adr  r0,fun   r0 = &fun  ==> add r0,pc,#n {0bxxxx xxxx 00}
					adr寻址范围 为 ±1020 字节
							    
		adrl r0,fun   r0 = &fun    			0bxxxx xxxx xxxx xxxx 00
					会被转换为 两条连续加法或减法
					装载范围为 ±256k
					
					
					
	
	
	
	
	
	
	
	
	














