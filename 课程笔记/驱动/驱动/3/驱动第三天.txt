模块的传参

short a;
module_param(a,,);
参数1:模块内部是一个变量名，加载模块时传参使用的名称
参数2:变量对应类型
	  int short long charp bool invbool 
参数3:权限，用来创建文件，这个文件以参数1命名，出现在/sys/module/模块名称/paramters/a
sudo insmod xxx.ko a=100

char str[100];
module_param_string(p,str,100,);
参数1:模块加载时使用的名称p
参数2:字符型数组名
参数3:数组大小
参数4:权限 

int n;
module_param_array(,,&n,);
参数1:数组名。
参数2:数组元素的类型
参数3:用来动态获取数据元素个数
参数4:权限 

模块符号表导出:
1、模块A中存在定义的函数。并且在函数定义下有EXPORT_SYMBOL_GPL(符号名);
2、编译模块A，必须加载模块A
3、导出的符号表，存放在了Module.symvers文件中。

4、拷贝Module.symvers给模块B
5、模块B中引用导出的符号(extern int 函数名(参数类型);)
	使用符号表时,static没有影响。
6、编译模块B，加载使用

字符设备框架:
用来专门描述字符设备的结构体
struct cdev{
	const struct file_operations *ops;
	dev_t dev;
};

struct file_operations 
{
	函数指针;给驱动使用的。
}；

模块声明

3、struct file_operations ops = {
	.open = xxx_open,
};
加载函数
{
	1、申请设备号 MKDEV(主设备号,次设备号);
	2、静态注册设备号 register_chrdev_region(起始设备号,次设备号个数,"名称");
	   或者动态注册 alloc_chrdev_region(&设备号变量,起始次设备号,次设备号个数,"名称");
	4、初始化字符设备  cdev_init(cdev结构体首地址,file_operations结构体首地址);   
	5、注册字符设备到系统中 cdev_add(cdev结构体首地址,起始设备号,添加的设备个数); 
}
卸载函数
{
	6、删除字符设备结构体 cdev_del(cdev首地址);
	7、注销设备号 unregister_chrdev_region(起始设备号，注销的个数);
}

空间首地址 = kzalloc(需要申请的空间大小,flags);
flags：GFP_USER
	   GFP_KERNEL


如何动态创建以及删除设备节点
必须掌握一个前提:
1、fstab文件中:sysfs       /sys            sysfs    defaults       0             0 
	将sysfs文件系统挂载/sys目录下。
	在这个目录下会出现很多子目录:class modules devices bus .....这些文件夹下面都可能出现
	一个叫做dev的文件，dev文件中存放了主、次设备号。
	
2、etc/init.d/rcS文件中:mdev -s 
	mdev帮助我们切换路径到/dev下，读取某个文件的设备号信息。mdev后续会扫描/sys/class或者
	/sys/block，如果在这些目录下有dev文件，并且存放了主、次设备号则在/dev下创建设备文件。


在驱动中如何实现设备节点的自动创建？
#define class_create(owner, name)  
功能:在/sys/class目录下以name创建一个文件夹，这个文件夹代表了一类设备

struct device *device_create(struct class *class, struct device *parent, dev_t devt, void *drvdata, const char *fmt, ...)

参数1:class_create返回值
//参数2:父类设备，暂时传NULL
参数3:设备号 
//参数4:给指定设备传递的参数，如果不用传NULL
参数5:指定的设备文件名
//参数6:依据参数5来确定

static inline long __must_check IS_ERR(__force const void *ptr)             
 33 {
 34     return IS_ERR_VALUE((unsigned long)ptr);
 35 }
			||
			\/
	20 #define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)
	16 #define MAX_ERRNO   4095
	
	所以x >= -4095
	
原码:1 19个0  111111111111
反码:1 19个1  000000000000
补码:1 19个1  000000000001  =的情况 
-4096的补码: 1 19个1  000000000000   0xFFFFF000

整个的虚拟地址范围 0x00000000 - 0xFFFFF000 - 0xFFFFFFFF
(0xFFFFF000,0xFFFFFFFF)都是描述错误码的。

IS_ERR()函数返回值如果是非0代表出错了。
PTR_ERR()用来获取错误码的。

自动清除设备文件:device_destroy();
自动删除设备类:class_destroy();

讲open、read、write前必须先了解一些结构体:
struct inode 
{
	dev_t           i_rdev;存放设备号
	unsigned long       i_ino; inode节点
	包含于共用体中struct cdev     *i_cdev 存放字符设备结构体首地址
};
这个结构体用来存放文件的静态信息，当文件被创建成功时inode结构体存放于硬盘中，第一次被
调用时inode结构体被加载到操作系统的内核空间中，因为inode结构体无论文件打开多少次它都是
唯一的。

struct file 
{
	const struct file_operations    *f_op; //会存放cdev结构体中的file_operations首地址
	void            *private_data; //存放的是私有数据
};
对于硬盘中的某个唯一的文件，每打开一次就会在内核空间产生一个file结构体。所以file结构体
维护的是文件的动态信息。


上层的open调用了驱动中的open

应用层:int    open(const char * , int flags,    mode_t mode);
						||			 ||
驱动层:int (*open)(struct inode *,struct file *);

驱动层的open为了应用层open来打开文件的，获取inode结构体中的信息，并且操作file结构体信息。
一旦驱动层打开文件成功，struct cdev     *i_cdev会被自己驱动中定义的cdev结构体首地址赋值。
同时const struct file_operations    *f_op = struct cdev结构体中的ops成员。

上层open如何调用到了底层open？
vi arch/arm/include/uapi/asm/unistd.h

#define __NR_open           (__NR_SYSCALL_BASE+  5) 
应用层open通过系统调用号5来索引到__NR_open

712 #define __NR_open 1024                                                      
713 __SYSCALL(__NR_open, sys_open)
						   ||
						   \/
				return do_sys_open(AT_FDCWD, filename, flags, mode); 
					||
					\/
				990   struct file *f = do_filp_open(dfd, tmp, &op);
					||
					\/
				3230     filp = path_openat(dfd, pathname, &nd, op, flags | LOOKUP_RCU); 
								||
								\/
					3199         error = do_last(nd, &path, file, op, &opened, pathname);
											||
											\/
								3039     error = finish_open(file, nd->path.dentry, NULL, opened); 
									||
									\/
								794     error = do_dentry_open(file, open, current_cred()); 
									||
									\/
								727         open = f->f_op->open; 
open = f->f_op->open = demo_open			

同理应用层read和write相应的调用了驱动中read和write接口

I/O:输入/读、输出/写

站在用户角度考虑:
什么是读/输入:数据从内核空间流向用户空间
什么是写/输出:数据从用户空间流向内核空间

应用层:ssize_t write(int fd,const char *,size_t );

驱动层:ssize_t (*write)(struct file *, const char __user *, size_t, loff_t *)
功能:接收应用层空间传递过来的数据
参数1:打开文件后内核就会创建一个struct file结构体，新创建的file结构体首地址
参数2:接收用户空间中传递过来的数据的首地址
参数3:接收的数据实际长度
参数4:文件指针偏移量

驱动的write如何接收用户层传递的数据？
使用static inline long copy_from_user(void *to,const void __user * from, unsigned long n)
参数1:驱动中一个空间首地址，这个空间用来接收数据
参数2:用户空间的数据首地址
参数3:实际拷贝的数据长度
返回值:0成功，非0失败

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

应用层:ssize_t read(int fd,char *,size_t);
驱动层:ssize_t (*write)(struct file *,char __user *, size_t, loff_t *)
参数1:打开文件后生成的file结构体首地址
参数2:用户空间接收数据的首地址
参数3:传递给用户空间的数据实际大小
参数4:文件指针偏移量
返回值:正确被应用层读走的数据长度

static inline long copy_to_user(void __user *to, const void *from, unsigned long n)
功能:拷贝数据到用户
参数1:用户空间接收数据的首地址
参数2:内核空间传递数据的首地址
参数3:实际传递给用户的数据大小
返回值:0成功，非0失败










			